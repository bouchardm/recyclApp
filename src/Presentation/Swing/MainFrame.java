/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Presentation.Swing;

import Application.Controller.Controller;
import Domain.Conveyor;
import Domain.EntryPoint;
import Domain.ExitPoint;
import Domain.SortStation;
import Domain.Outlet;
import Domain.Inlet;
import Domain.Junction;
import Domain.SortCenter;
import Domain.TransStation;
import java.awt.geom.Line2D;
import java.awt.geom.Point2D;
import java.nio.file.Path;
import javax.swing.AbstractButton;
import javax.swing.ButtonGroup;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author Marcleking
 */
public class MainFrame extends javax.swing.JFrame {

    Controller _controller;
    ButtonGroup buttonGroup;
    private Point2D.Float _dragOffset;

//    SortStation _sortStationSelected;
    /**
     * Creates new form fenetre
     */
    public MainFrame() {
        _controller = new Controller();
//        _sortStationSelected = null;
        initComponents();
        buttonGroup = new ButtonGroup();
        buttonGroup.add(btnAddEntry);
        buttonGroup.add(btnAddStation);
        buttonGroup.add(btnAddTransStation);
        buttonGroup.add(btnAddConveyor);
        buttonGroup.add(btnAddJunction);
        buttonGroup.add(btnAddExit);

        this.setLocationRelativeTo(null); // Centrer la fenêtre
        ImageIcon sdf = new javax.swing.ImageIcon(getClass().getResource("/image/station.png"));
        this.setIconImage(sdf.getImage());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        PanelButton = new javax.swing.JPanel();
        btnCreateNewProject = new javax.swing.JButton();
        btnUndo = new javax.swing.JButton();
        btnRedo = new javax.swing.JButton();
        btnSave = new javax.swing.JButton();
        btnOpen = new javax.swing.JButton();
        btnAddStation = new javax.swing.JToggleButton();
        btnAddConveyor = new javax.swing.JToggleButton();
        btnAddTransStation = new javax.swing.JToggleButton();
        btnAddJunction = new javax.swing.JToggleButton();
        btnAddEntry = new javax.swing.JToggleButton();
        btnAddExit = new javax.swing.JToggleButton();
        btnExport = new javax.swing.JButton();
        panelWrokspace = new javax.swing.JPanel();
        viewportBar = new javax.swing.JPanel();
        zoomOutButton = new javax.swing.JButton();
        zoomInButton = new javax.swing.JButton();
        cursorCoordsLabel = new javax.swing.JLabel();
        gridCheckBox = new javax.swing.JCheckBox();
        snapCheckBox = new javax.swing.JCheckBox();
        jLabel2 = new javax.swing.JLabel();
        xGridDimFTextField = new javax.swing.JFormattedTextField();
        yGridDimFTextField = new javax.swing.JFormattedTextField();
        viewportScrollPane = new javax.swing.JScrollPane();
        viewport = new Presentation.Swing.Viewport(this);
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        panelInformation = new javax.swing.JPanel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        openMenu = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        newMenu = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        menuAddEntree = new javax.swing.JMenuItem();
        menuAddSortStation = new javax.swing.JMenuItem();
        menuAddTransStation = new javax.swing.JMenuItem();
        menuAddConveyor = new javax.swing.JMenuItem();
        menuAddJunction = new javax.swing.JMenuItem();
        menuAddExitPoint = new javax.swing.JMenuItem();
        menuMatter = new javax.swing.JMenu();
        menuMatterList = new javax.swing.JMenuItem();
        btnAddMatter = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        btnAboutUs = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("RecyclApp");

        PanelButton.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        btnCreateNewProject.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/new.png"))); // NOI18N
        btnCreateNewProject.setToolTipText("Créé un nouveau projet");
        btnCreateNewProject.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateNewProjectActionPerformed(evt);
            }
        });

        btnUndo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/undo.png"))); // NOI18N
        btnUndo.setToolTipText("Annuler");
        btnUndo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUndoActionPerformed(evt);
            }
        });

        btnRedo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/redo.png"))); // NOI18N
        btnRedo.setToolTipText("Refaire");
        btnRedo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRedoActionPerformed(evt);
            }
        });

        btnSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/save.png"))); // NOI18N
        btnSave.setToolTipText("Enregistrer");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        btnOpen.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/open.png"))); // NOI18N
        btnOpen.setToolTipText("Ouvrir un projet");
        btnOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOpenActionPerformed(evt);
            }
        });

        btnAddStation.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/station.png"))); // NOI18N
        btnAddStation.setToolTipText("Ajouter une station de tri");
        btnAddStation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddStationActionPerformed(evt);
            }
        });

        btnAddConveyor.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/conveyor.png"))); // NOI18N
        btnAddConveyor.setToolTipText("Ajouter un convoyeur");
        btnAddConveyor.setName("btnAddStation"); // NOI18N
        btnAddConveyor.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnAddConveyorMouseClicked(evt);
            }
        });
        btnAddConveyor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddConveyorActionPerformed(evt);
            }
        });

        btnAddTransStation.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/station.png"))); // NOI18N
        btnAddTransStation.setToolTipText("Ajouter une station de transformation");
        btnAddTransStation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddTransStationActionPerformed(evt);
            }
        });

        btnAddJunction.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/junction.png"))); // NOI18N
        btnAddJunction.setToolTipText("Ajouter une jonction");
        btnAddJunction.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddJunctionActionPerformed(evt);
            }
        });

        btnAddEntry.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/entry.png"))); // NOI18N
        btnAddEntry.setToolTipText("Ajouter une entré");
        btnAddEntry.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnAddEntryMouseClicked(evt);
            }
        });
        btnAddEntry.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddEntryActionPerformed(evt);
            }
        });

        btnAddExit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/exit.png"))); // NOI18N
        btnAddExit.setToolTipText("Ajouter un point de sortie");
        btnAddExit.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnAddExitMouseClicked(evt);
            }
        });
        btnAddExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddExitActionPerformed(evt);
            }
        });

        btnExport.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/image.png"))); // NOI18N
        btnExport.setToolTipText("Exporté le plan sous forme d'image");
        btnExport.setMaximumSize(new java.awt.Dimension(57, 33));
        btnExport.setMinimumSize(new java.awt.Dimension(57, 33));
        btnExport.setPreferredSize(new java.awt.Dimension(57, 33));
        btnExport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExportActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout PanelButtonLayout = new javax.swing.GroupLayout(PanelButton);
        PanelButton.setLayout(PanelButtonLayout);
        PanelButtonLayout.setHorizontalGroup(
            PanelButtonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(btnAddEntry, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(btnRedo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(btnUndo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(btnCreateNewProject, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(btnOpen, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(btnSave, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(btnAddStation, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(btnAddTransStation, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(btnAddConveyor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(btnAddJunction, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(btnAddExit, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(btnExport, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        PanelButtonLayout.setVerticalGroup(
            PanelButtonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelButtonLayout.createSequentialGroup()
                .addComponent(btnAddEntry, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnAddStation, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnAddTransStation, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnAddConveyor, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnAddJunction, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnAddExit, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnExport, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnOpen, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnCreateNewProject, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnUndo, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnRedo, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        btnExport.getAccessibleContext().setAccessibleDescription("Exporter image");

        panelWrokspace.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        panelWrokspace.setLayout(new java.awt.BorderLayout());

        viewportBar.setPreferredSize(new java.awt.Dimension(710, 30));

        zoomOutButton.setText("-");
        zoomOutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                zoomOutButtonActionPerformed(evt);
            }
        });

        zoomInButton.setText("+");
        zoomInButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                zoomInButtonActionPerformed(evt);
            }
        });

        cursorCoordsLabel.setText("x : -,-- m  y : -,-- m");

        gridCheckBox.setLabel("grille");
        gridCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gridCheckBoxActionPerformed(evt);
            }
        });

        snapCheckBox.setLabel("magnétisme");
        snapCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                snapCheckBoxActionPerformed(evt);
            }
        });

        jLabel2.setText("x");

        xGridDimFTextField.setValue(1.00f);
        xGridDimFTextField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00 m"))));
        xGridDimFTextField.setText("0,50 m");
        xGridDimFTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                xGridDimFTextFieldActionPerformed(evt);
            }
        });

        yGridDimFTextField.setValue(1.00f);
        yGridDimFTextField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00 m"))));
        yGridDimFTextField.setText("0,50 m");
        yGridDimFTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                yGridDimFTextFieldActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout viewportBarLayout = new javax.swing.GroupLayout(viewportBar);
        viewportBar.setLayout(viewportBarLayout);
        viewportBarLayout.setHorizontalGroup(
            viewportBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(viewportBarLayout.createSequentialGroup()
                .addComponent(gridCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(xGridDimFTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(yGridDimFTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(snapCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 414, Short.MAX_VALUE)
                .addComponent(cursorCoordsLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(zoomOutButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(zoomInButton))
        );
        viewportBarLayout.setVerticalGroup(
            viewportBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(viewportBarLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(viewportBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(viewportBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(snapCheckBox)
                        .addComponent(gridCheckBox)
                        .addComponent(xGridDimFTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel2)
                        .addComponent(yGridDimFTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(viewportBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(zoomInButton)
                        .addComponent(zoomOutButton)
                        .addComponent(cursorCoordsLabel)))
                .addGap(2, 2, 2))
        );

        panelWrokspace.add(viewportBar, java.awt.BorderLayout.PAGE_END);

        viewport.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                viewportMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                viewportMouseReleased(evt);
            }
        });
        viewport.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                viewportMouseDragged(evt);
            }
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                viewportMouseMoved(evt);
            }
        });

        javax.swing.GroupLayout viewportLayout = new javax.swing.GroupLayout(viewport);
        viewport.setLayout(viewportLayout);
        viewportLayout.setHorizontalGroup(
            viewportLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1223, Short.MAX_VALUE)
        );
        viewportLayout.setVerticalGroup(
            viewportLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 663, Short.MAX_VALUE)
        );

        viewportScrollPane.setViewportView(viewport);

        panelWrokspace.add(viewportScrollPane, java.awt.BorderLayout.CENTER);

        jPanel3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel1.setText("Information");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1)
        );

        panelInformation.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout panelInformationLayout = new javax.swing.GroupLayout(panelInformation);
        panelInformation.setLayout(panelInformationLayout);
        panelInformationLayout.setHorizontalGroup(
            panelInformationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 214, Short.MAX_VALUE)
        );
        panelInformationLayout.setVerticalGroup(
            panelInformationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jMenu1.setText("Fichier");

        openMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, 0));
        openMenu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/open.png"))); // NOI18N
        openMenu.setText("Ouvrir");
        jMenu1.add(openMenu);
        jMenu1.add(jSeparator1);

        newMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, 0));
        newMenu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/new.png"))); // NOI18N
        newMenu.setText("Nouveau");
        newMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newMenuActionPerformed(evt);
            }
        });
        jMenu1.add(newMenu);
        jMenu1.add(jSeparator2);

        jMenuItem2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, 0));
        jMenuItem2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/save.png"))); // NOI18N
        jMenuItem2.setText("Enregistrer");
        jMenu1.add(jMenuItem2);

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_I, 0));
        jMenuItem1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/image.png"))); // NOI18N
        jMenuItem1.setText("Exporter Image");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuBar1.add(jMenu1);

        jMenu3.setText("Ajouter");

        menuAddEntree.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        menuAddEntree.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/entry.png"))); // NOI18N
        menuAddEntree.setText("Entrée");
        menuAddEntree.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuAddEntreeActionPerformed(evt);
            }
        });
        jMenu3.add(menuAddEntree);

        menuAddSortStation.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        menuAddSortStation.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/station.png"))); // NOI18N
        menuAddSortStation.setText("Station de tri");
        menuAddSortStation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuAddSortStationActionPerformed(evt);
            }
        });
        jMenu3.add(menuAddSortStation);

        menuAddTransStation.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_T, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        menuAddTransStation.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/station.png"))); // NOI18N
        menuAddTransStation.setText("Station de transformation");
        menuAddTransStation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuAddTransStationActionPerformed(evt);
            }
        });
        jMenu3.add(menuAddTransStation);

        menuAddConveyor.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        menuAddConveyor.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/conveyor.png"))); // NOI18N
        menuAddConveyor.setText("Convoyeur");
        menuAddConveyor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuAddConveyorActionPerformed(evt);
            }
        });
        jMenu3.add(menuAddConveyor);

        menuAddJunction.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_J, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        menuAddJunction.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/junction.png"))); // NOI18N
        menuAddJunction.setText("Jonction");
        menuAddJunction.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuAddJunctionActionPerformed(evt);
            }
        });
        jMenu3.add(menuAddJunction);

        menuAddExitPoint.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        menuAddExitPoint.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/exit.png"))); // NOI18N
        menuAddExitPoint.setText("Sortie");
        menuAddExitPoint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuAddExitPointActionPerformed(evt);
            }
        });
        jMenu3.add(menuAddExitPoint);

        jMenuBar1.add(jMenu3);

        menuMatter.setText("Matières");
        menuMatter.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        menuMatter.setName(""); // NOI18N

        menuMatterList.setText("Liste Matière");
        menuMatterList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuMatterListActionPerformed(evt);
            }
        });
        menuMatter.add(menuMatterList);

        btnAddMatter.setText("Ajouter une matière");
        btnAddMatter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddMatterActionPerformed(evt);
            }
        });
        menuMatter.add(btnAddMatter);

        jMenuBar1.add(menuMatter);
        menuMatter.getAccessibleContext().setAccessibleDescription("");

        jMenu2.setText("Édition");

        jMenuItem4.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Z, 0));
        jMenuItem4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/undo.png"))); // NOI18N
        jMenuItem4.setText("Annuler");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem4);

        jMenuItem5.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Y, 0));
        jMenuItem5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/redo.png"))); // NOI18N
        jMenuItem5.setText("Refaire");
        jMenu2.add(jMenuItem5);

        jMenuBar1.add(jMenu2);

        btnAboutUs.setText("À propos");
        btnAboutUs.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnAboutUsMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                btnAboutUsMousePressed(evt);
            }
        });
        jMenuBar1.add(btnAboutUs);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(PanelButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelWrokspace, javax.swing.GroupLayout.DEFAULT_SIZE, 822, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(panelInformation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(PanelButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(panelWrokspace, javax.swing.GroupLayout.DEFAULT_SIZE, 681, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelInformation, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        getAccessibleContext().setAccessibleDescription("Logiciel de conception de centre de tri");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnRedoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRedoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnRedoActionPerformed

    private void btnUndoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUndoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnUndoActionPerformed

    private void btnCreateNewProjectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateNewProjectActionPerformed
        _controller.CreateNewProject();
        repaint();
    }//GEN-LAST:event_btnCreateNewProjectActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
       saveProject();
    }//GEN-LAST:event_btnSaveActionPerformed

    private void btnOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOpenActionPerformed
        loadProject();
    }//GEN-LAST:event_btnOpenActionPerformed

    private void newMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newMenuActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_newMenuActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void btnAboutUsMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnAboutUsMousePressed
        this._controller.showAboutUs();
    }//GEN-LAST:event_btnAboutUsMousePressed

    private void viewportMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_viewportMouseMoved
        Point2D.Float position = this.viewport.createPointInMeter(evt.getX(), evt.getY());
        cursorCoordsLabel.setText(String.format("x : %.2f m  y : %.2f m\n", position.x, position.y));
        Line2D.Float connectingArrow = viewport.getConnectingArrow();

        if (connectingArrow != null) {
            Point2D.Float p1 = (Point2D.Float)_controller.getOutletAttribute("position");
            connectingArrow.x1 = p1.x;
            connectingArrow.y1 = p1.y;
            connectingArrow.x2 = viewport.pixToMeter(evt.getX());
            connectingArrow.y2 = viewport.pixToMeter(evt.getY());
            viewport.setConnectingArrow(connectingArrow);
            viewport.repaint();
        }
    }//GEN-LAST:event_viewportMouseMoved

    private void zoomInButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_zoomInButtonActionPerformed
        viewport.setZoomFactor(viewport.getZoomFactor() + 0.1f);
    }//GEN-LAST:event_zoomInButtonActionPerformed

    private void zoomOutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_zoomOutButtonActionPerformed
        viewport.setZoomFactor(viewport.getZoomFactor() - 0.1f);
    }//GEN-LAST:event_zoomOutButtonActionPerformed

    private void gridCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gridCheckBoxActionPerformed
        AbstractButton abstractButton = (AbstractButton) evt.getSource();
        viewport.displayGrid(abstractButton.getModel().isSelected());
    }//GEN-LAST:event_gridCheckBoxActionPerformed

    private void snapCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_snapCheckBoxActionPerformed
        AbstractButton abstractButton = (AbstractButton) evt.getSource();
        viewport.snapToGrid(abstractButton.getModel().isSelected());
    }//GEN-LAST:event_snapCheckBoxActionPerformed

    private void xGridDimFTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_xGridDimFTextFieldActionPerformed
        Point2D.Float dim = new Point2D.Float(
                Float.valueOf(xGridDimFTextField.getValue().toString()),
                Float.valueOf(yGridDimFTextField.getValue().toString()));
        viewport.setGridDimensions(dim);
        requestFocus();
    }//GEN-LAST:event_xGridDimFTextFieldActionPerformed

    private void yGridDimFTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_yGridDimFTextFieldActionPerformed
        Point2D.Float dim = new Point2D.Float(
                Float.valueOf(xGridDimFTextField.getValue().toString()),
                Float.valueOf(yGridDimFTextField.getValue().toString()));
        viewport.setGridDimensions(dim);
        requestFocus();
    }//GEN-LAST:event_yGridDimFTextFieldActionPerformed

    private void viewportMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_viewportMouseReleased
        Point2D.Float position = viewport.createPointInMeter(evt.getX(), evt.getY());
        _dragOffset = null;
        if (viewport.isSnapToGrid()) {
            position = viewport.snap(position);
        }
        
        this.buttonGroup.clearSelection();
        switch (viewport.getCreationMode()) {
            case NONE:
                btnAddConveyor.setSelected(false);
                break;
            case SORT_STATION:
                _controller.AddStation(position);
                viewport.setCreationMode(Viewport.CREATION_MODES.NONE);
                btnAddStation.setSelected(false);
                break;
            case TRANS_STATION:
                _controller.AddTransStation(position);
                viewport.setCreationMode(Viewport.CREATION_MODES.NONE);
                btnAddTransStation.setSelected(false);
                break;
            case JUNCTION:
                this._controller.addJunction(position);
                this.viewport.setCreationMode(Viewport.CREATION_MODES.NONE);
                this.btnAddJunction.setSelected(false);
                break;
            case CONVEYOR_1:
                if (this._controller.typeOfElementSelectedIs(Outlet.class)) {

                    _controller.setOutlet();
                    if (!_controller.getOutlet().IsFree()) {
                        JOptionPane.showMessageDialog(null, "La sortie sélectionnée n'est pas libre", null, 0);
                        this.viewport.setCreationMode(Viewport.CREATION_MODES.NONE);
                        btnAddConveyor.setSelected(false);
                        viewport.setConnectingArrow(null);
                        repaint();
                        return;
                    } else {
                        viewport.setCreationMode(Viewport.CREATION_MODES.CONVEYOR_2);
                        Line2D.Float line = new Line2D.Float(viewport.pixToMeter(evt.getX()),
                                viewport.pixToMeter(evt.getY()),
                                viewport.pixToMeter(evt.getX()),
                                viewport.pixToMeter(evt.getY()));
                        viewport.setConnectingArrow(line);
                    }

                } else {
                    JOptionPane.showMessageDialog(null, "Choisir une sortie en premier", null, 0);
                    btnAddConveyor.setSelected(false);
                    this.viewport.setCreationMode(Viewport.CREATION_MODES.NONE);
                    viewport.setConnectingArrow(null);

                }
                break;
            case CONVEYOR_2:
                if (this._controller.typeOfElementSelectedIs(Inlet.class)) {
                    viewport.setConnectingArrow(null);
                    _controller.setInlet();

                    boolean isJunction = _controller.getInlet().getNode().getClass() == Junction.class;
                    // || _controller.getInlet().getNode().getClass() == ExitPoint.class;
                    if (!isJunction && !_controller.getInlet().IsFree()) {
                        viewport.setConnectingArrow(null);
                        JOptionPane.showMessageDialog(null, "L'entrée sélectionnée n'est pas libre", null, 0);
                        this.viewport.setCreationMode(Viewport.CREATION_MODES.NONE);
                        repaint();
                        return;
                    }
                    _controller.addConveyor();
                } else {
                    JOptionPane.showMessageDialog(null, "Choisir une entrée", null, 0);
                }
                viewport.setCreationMode(Viewport.CREATION_MODES.NONE);
                viewport.setConnectingArrow(null);
                btnAddConveyor.setSelected(false);
                break;
            case ENTRY:
                this._controller.AddEntryPoint(position);
                viewport.setCreationMode(Viewport.CREATION_MODES.NONE);
                btnAddEntry.setSelected(false);
                break;
            case EXIT:
                if (viewport.isSnapToGrid()) {
                    position = viewport.snap(position);
                }
                _controller.AddExitPoint(position);
                viewport.setCreationMode(Viewport.CREATION_MODES.NONE);
                btnAddExit.setSelected(false);
                break;
        }
        repaint();
    }//GEN-LAST:event_viewportMouseReleased

    private void btnAddStationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddStationActionPerformed
        this.viewport.setCreationMode(Viewport.CREATION_MODES.SORT_STATION);
    }//GEN-LAST:event_btnAddStationActionPerformed

    private void viewportMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_viewportMouseDragged
        Point2D.Float position = this.viewport.createPointInMeter(evt.getX(), evt.getY());
        cursorCoordsLabel.setText(String.format("x : %.2f m  y : %.2f m\n", position.x, position.y));

        if (!(_controller.selectedElementIsFloor() || _controller.typeOfElementSelectedIs(Conveyor.class))) 
        {
            Point2D.Float elemPos = (Point2D.Float)_controller.getSelectedElementAttribute("position");
            position.x = position.x - _dragOffset.x;
            position.y = position.y - _dragOffset.y;
            if (viewport.isSnapToGrid()) {
                position = viewport.snap(position);
            }

            _controller.moveStation(position);
//            _controller.setSelectedElementAttribute("position", position);

            this.viewport.repaint();
        }
    }//GEN-LAST:event_viewportMouseDragged

    private void viewportMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_viewportMousePressed
        Point2D.Float position = viewport.createPointInMeter(evt.getX(), evt.getY());
        cleanInformationPanel();
        _controller.selectElement(position);
        if (!(_controller.typeOfElementSelectedIs(SortCenter.class) ||  _controller.typeOfElementSelectedIs(Conveyor.class)))
        {
            _dragOffset = (Point2D.Float)_controller.getSelectedElementAttribute("position");
            _dragOffset.x = position.x - _dragOffset.x;
            _dragOffset.y = position.y - _dragOffset.y;
        }

        // Selection
        if (this._controller.typeOfElementSelectedIs(SortStation.class)) {
            infoSortStationFrame infoSortStationFrame = new infoSortStationFrame(
                    _controller,
                    this
            );

            JPanel sortStationPanel = infoSortStationFrame.getPanel();

            sortStationPanel.setSize(this.panelInformation.getWidth(), this.panelInformation.getHeight());
            panelInformation.add(sortStationPanel);
        } else if (this._controller.typeOfElementSelectedIs(TransStation.class)) {
            infoTransStationFrame infoTransStationFrame = new infoTransStationFrame(
                    _controller,
                    this
            );

            JPanel sortStationPanel = infoTransStationFrame.getPanel();

            sortStationPanel.setSize(this.panelInformation.getWidth(), this.panelInformation.getHeight());
            panelInformation.add(sortStationPanel);
        } else if (this._controller.typeOfElementSelectedIs(Junction.class)) {
            infoJunctionFrame infoJunctionFrame = new infoJunctionFrame(this._controller, this);
            JPanel infoJunctionPanel = infoJunctionFrame.getPanel();
            infoJunctionPanel.setSize(this.panelInformation.getWidth(), this.panelInformation.getHeight());
            panelInformation.add(infoJunctionPanel);
        } else if (this._controller.typeOfElementSelectedIs(EntryPoint.class)) {
            InfoEntryPointFrame infoEntryPointFrame = new InfoEntryPointFrame(this._controller, this);
            JPanel infoEntryPointPanel = infoEntryPointFrame.getPanel();
            infoEntryPointPanel.setSize(this.panelInformation.getWidth(), this.panelInformation.getHeight());
            panelInformation.add(infoEntryPointPanel);
        } else if (this._controller.typeOfElementSelectedIs(ExitPoint.class)) {
            InfoExitPointFrame infoExitPointFrame = new InfoExitPointFrame(this._controller, this);
            JPanel infoExitPointPanel = infoExitPointFrame.getPanel();
            infoExitPointPanel.setSize(this.panelInformation.getWidth(), this.panelInformation.getHeight());
            panelInformation.add(infoExitPointPanel);
        } else if (this._controller.typeOfElementSelectedIs(Conveyor.class)) {
            infoConveyorFrame infoConveyorFrame = new infoConveyorFrame(this._controller, this);
            JPanel InfoExitPointPanel = infoConveyorFrame.getPanel();
            InfoExitPointPanel.setSize(this.panelInformation.getWidth(), this.panelInformation.getHeight());
            panelInformation.add(InfoExitPointPanel);
        }
        else if (this._controller.typeOfElementSelectedIs(SortCenter.class)) {
            SortCenterParamPanel sortCenterParamPanel = new SortCenterParamPanel(this._controller, this);
            JPanel SortCenterParamPanel = sortCenterParamPanel.getPanel();
            SortCenterParamPanel.setSize(this.panelInformation.getWidth(), this.panelInformation.getHeight());
            panelInformation.add(SortCenterParamPanel);
        }

        repaint();
    }//GEN-LAST:event_viewportMousePressed

    private void btnAddConveyorMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnAddConveyorMouseClicked
        
    }//GEN-LAST:event_btnAddConveyorMouseClicked

    private void btnAddTransStationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddTransStationActionPerformed
        this.viewport.setCreationMode(Viewport.CREATION_MODES.TRANS_STATION); 
    }//GEN-LAST:event_btnAddTransStationActionPerformed

    private void btnAddJunctionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddJunctionActionPerformed
        this.viewport.setCreationMode(Viewport.CREATION_MODES.JUNCTION);
    }//GEN-LAST:event_btnAddJunctionActionPerformed

    private void btnAddEntryMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnAddEntryMouseClicked
        
    }//GEN-LAST:event_btnAddEntryMouseClicked

    private void btnAddExitMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnAddExitMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_btnAddExitMouseClicked

    private void btnAddExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddExitActionPerformed
        if (btnAddExit.isSelected()) {
            this.viewport.setCreationMode(Viewport.CREATION_MODES.EXIT);
        } else {
            this.viewport.setCreationMode(Viewport.CREATION_MODES.NONE);
        }
    }//GEN-LAST:event_btnAddExitActionPerformed

    private void menuAddEntreeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuAddEntreeActionPerformed
        btnAddEntry.setSelected(true);
        this.viewport.setCreationMode(Viewport.CREATION_MODES.ENTRY);
    }//GEN-LAST:event_menuAddEntreeActionPerformed

    private void menuAddSortStationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuAddSortStationActionPerformed
        btnAddStation.setSelected(true);
        this.viewport.setCreationMode(Viewport.CREATION_MODES.SORT_STATION);
    }//GEN-LAST:event_menuAddSortStationActionPerformed

    private void menuAddTransStationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuAddTransStationActionPerformed
        btnAddTransStation.setSelected(true);
        this.viewport.setCreationMode(Viewport.CREATION_MODES.TRANS_STATION);
    }//GEN-LAST:event_menuAddTransStationActionPerformed

    private void menuAddConveyorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuAddConveyorActionPerformed
        btnAddConveyor.setSelected(true);
        this.viewport.setCreationMode(Viewport.CREATION_MODES.CONVEYOR_1);
    }//GEN-LAST:event_menuAddConveyorActionPerformed

    private void menuAddJunctionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuAddJunctionActionPerformed
        btnAddJunction.setSelected(true);
        this.viewport.setCreationMode(Viewport.CREATION_MODES.JUNCTION);
    }//GEN-LAST:event_menuAddJunctionActionPerformed

    private void menuAddExitPointActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuAddExitPointActionPerformed
        btnAddExit.setSelected(true);
        this.viewport.setCreationMode(Viewport.CREATION_MODES.EXIT);
    }//GEN-LAST:event_menuAddExitPointActionPerformed

    private void btnAddEntryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddEntryActionPerformed
        btnAddEntry.setSelected(true);
        this.viewport.setCreationMode(Viewport.CREATION_MODES.ENTRY);
    }//GEN-LAST:event_btnAddEntryActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        exportImage();
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void btnExportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExportActionPerformed
        exportImage();
    }//GEN-LAST:event_btnExportActionPerformed

    private void menuMatterListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuMatterListActionPerformed
        this._controller.showMatterFrame();
    }//GEN-LAST:event_menuMatterListActionPerformed

    private void btnAddMatterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddMatterActionPerformed
        this._controller.addMatter();
    }//GEN-LAST:event_btnAddMatterActionPerformed

    private void btnAboutUsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnAboutUsMouseClicked
//        this._controller.showAboutUs();
    }//GEN-LAST:event_btnAboutUsMouseClicked

    private void btnAddConveyorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddConveyorActionPerformed
        this.viewport.setCreationMode(Viewport.CREATION_MODES.CONVEYOR_1);
    }//GEN-LAST:event_btnAddConveyorActionPerformed

    @Override
    public void repaint()
    {
        super.repaint();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel PanelButton;
    private javax.swing.JMenu btnAboutUs;
    private javax.swing.JToggleButton btnAddConveyor;
    private javax.swing.JToggleButton btnAddEntry;
    private javax.swing.JToggleButton btnAddExit;
    private javax.swing.JToggleButton btnAddJunction;
    private javax.swing.JMenuItem btnAddMatter;
    private javax.swing.JToggleButton btnAddStation;
    private javax.swing.JToggleButton btnAddTransStation;
    private javax.swing.JButton btnCreateNewProject;
    private javax.swing.JButton btnExport;
    private javax.swing.JButton btnOpen;
    private javax.swing.JButton btnRedo;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnUndo;
    private javax.swing.JLabel cursorCoordsLabel;
    private javax.swing.JCheckBox gridCheckBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JMenuItem menuAddConveyor;
    private javax.swing.JMenuItem menuAddEntree;
    private javax.swing.JMenuItem menuAddExitPoint;
    private javax.swing.JMenuItem menuAddJunction;
    private javax.swing.JMenuItem menuAddSortStation;
    private javax.swing.JMenuItem menuAddTransStation;
    private javax.swing.JMenu menuMatter;
    private javax.swing.JMenuItem menuMatterList;
    private javax.swing.JMenuItem newMenu;
    private javax.swing.JMenuItem openMenu;
    private javax.swing.JPanel panelInformation;
    private javax.swing.JPanel panelWrokspace;
    private javax.swing.JCheckBox snapCheckBox;
    private Presentation.Swing.Viewport viewport;
    private javax.swing.JPanel viewportBar;
    private javax.swing.JScrollPane viewportScrollPane;
    private javax.swing.JFormattedTextField xGridDimFTextField;
    private javax.swing.JFormattedTextField yGridDimFTextField;
    private javax.swing.JButton zoomInButton;
    private javax.swing.JButton zoomOutButton;
    // End of variables declaration//GEN-END:variables

    public void cleanInformationPanel() {
        this.panelInformation.removeAll();
    }
    
    private void loadProject()
    {
                JFileChooser filePicker = new JFileChooser();
        FileNameExtensionFilter smileyFilter = new FileNameExtensionFilter(".smiley", "smiley");
        filePicker.removeChoosableFileFilter(filePicker.getFileFilter());
        filePicker.setFileFilter(smileyFilter);
        filePicker.setDialogTitle("Charger le projet");
        filePicker.setApproveButtonText("Ouvrir");
        int response = filePicker.showOpenDialog(this);
        if (response == JFileChooser.APPROVE_OPTION)
        {
            FileFilter fileFilter = filePicker.getFileFilter();
            String extension = ((FileNameExtensionFilter)fileFilter).getExtensions()[0];
            String path = filePicker.getSelectedFile().toString();
            if (!fileFilter.accept(filePicker.getSelectedFile()))
            {
                path += "." + extension;
            }
            
            _controller.LoadProject(path);
            repaint();
            
        }
    }
    private void saveProject()
    {
            JFileChooser filePicker = new JFileChooser();
        FileNameExtensionFilter smileyFilter = new FileNameExtensionFilter(".smiley", "smiley");
        filePicker.removeChoosableFileFilter(filePicker.getFileFilter());
        filePicker.setFileFilter(smileyFilter);
        filePicker.setDialogTitle("Enregistrer le projet");
        int response = filePicker.showSaveDialog(this);
        if (response == JFileChooser.APPROVE_OPTION)
        {
            FileFilter fileFilter = filePicker.getFileFilter();
            String extension = ((FileNameExtensionFilter)fileFilter).getExtensions()[0];
            if (filePicker.getSelectedFile().exists())
            {
                int answer = JOptionPane.showConfirmDialog(this, "Le fichier existe déjà.\nVoulez-vous l'écraser?", "Écraser?", JOptionPane.YES_NO_OPTION);
                if (answer != 0)
                {
                    return;
                }
            }
            String path = filePicker.getSelectedFile().toString();
            if (!fileFilter.accept(filePicker.getSelectedFile()))
            {
                path += "." + extension;
            }
            
            _controller.SaveProject(path);
        }
    
    }
    private void exportImage()
    {
        JFileChooser filePicker = new JFileChooser();
        FileNameExtensionFilter jpgFilter = new FileNameExtensionFilter(".jpg", "jpg");
        FileNameExtensionFilter gifFilter = new FileNameExtensionFilter(".gif", "gif");
        FileNameExtensionFilter pngFilter = new FileNameExtensionFilter(".png", "png");
        filePicker.removeChoosableFileFilter(filePicker.getFileFilter());
        filePicker.addChoosableFileFilter(jpgFilter);
        filePicker.addChoosableFileFilter(gifFilter);
        filePicker.addChoosableFileFilter(pngFilter);
        filePicker.setFileFilter(jpgFilter);
        int response = filePicker.showSaveDialog(this);
        if (response == JFileChooser.APPROVE_OPTION)
        {
            FileFilter fileFilter = filePicker.getFileFilter();
            String extension = ((FileNameExtensionFilter)fileFilter).getExtensions()[0];
            if (filePicker.getSelectedFile().exists())
            {
                int answer = JOptionPane.showConfirmDialog(this, "Le fichier existe déjà.\nVoulez-vous l'écraser?", "Écraser?", JOptionPane.YES_NO_OPTION);
                if (answer != 0)
                {
                    return;
                }
            }
            String path = filePicker.getSelectedFile().toString();
            if (!fileFilter.accept(filePicker.getSelectedFile()))
            {
                path += "." + extension;
            }
            viewport.exportImage(path, extension);
        }
    }
}
